[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
	autocmd FileType denite call s:denite_my_settings()
	function! s:denite_my_settings() abort
		nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
		nnoremap <silent><buffer><expr> s denite#do_map('do_action', 'split')
		nnoremap <silent><buffer><expr> v denite#do_map('do_action', 'vsplit')
		nnoremap <silent><buffer><expr> t denite#do_map('do_action', 'tabopen')
	  	nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
	  	nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
	  	nnoremap <silent><buffer><expr> q denite#do_map('quit')
	  	nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
	  	nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
	endfunction

	nnoremap <Leader>o :Denite outline -start-filter -split=no -filter-split-direction=abo<CR>
'''

[[plugins]]
repo = 'Shougo/ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
hook_add = '''
	call ddu#custom#patch_global({'ui': 'ff'})
	call ddu#custom#patch_global({
	\	'uiParams': {
	\		'ff': {
	\			'startFilter': v:true,
	\		}
	\	}
	\ })

	autocmd FileType ddu-ff call s:ddu_settings()
	function! s:ddu_settings() abort
		nnoremap <buffer><silent> <CR> <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
		nnoremap <buffer><silent> i <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
		nnoremap <buffer><silent> q <Cmd>call ddu#ui#ff#do_action('quit')<CR>
	endfunction

	autocmd FileType ddu-ff-filter call s:ddu_filter_settings()
	function! s:ddu_filter_settings() abort
		inoremap <silent><buffer> <CR> <Esc><Cmd>call ddu#ui#ff#close()<CR>
		nnoremap <silent><buffer> <CR> <Esc><Cmd>call ddu#ui#ff#close()<CR>
		nnoremap <silent><buffer> q <Cmd>call ddu#ui#ff#do_action('quit')<CR>
	endfunction
'''

[[plugins]]
repo = 'Shougo/ddu-kind-file'
hook_add = '''
	call ddu#custom#patch_global({
	\	'kindOptions': {
	\		'file': {
	\			'defaultAction': 'open'
	\		},
	\	},
	\ })
'''

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
hook_add = '''
	call ddu#custom#patch_global({
	\	'sourceOptions': {
	\		'_': {
	\			'matchers': ['matcher_substring'],
	\			'ignoreCase': v:true,
	\		},
	\	},
	\ })
'''

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
hook_add = '''
	call ddu#custom#patch_global({
	\	'sourceOptions': {
	\		'file_rec': {
	\			'path': expand('.')
	\		},
	\	},
	\ })

	nnoremap <C-p> <Cmd>call ddu#start({'sources': [{'name': 'file_rec'}]})<CR>
'''

[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'

[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'Shougo/ddc.vim'
hook_add = '''
	call ddc#custom#patch_global('sources', ['around', 'neosnippet'])
	call ddc#custom#patch_global('sourceOptions', {
		\ '_': {
		\	'matchers': ['matcher_head']
		\ }})
	call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
	let g:neosnippet#disable_runtime_snippets = {'_' : 1, 'cpp' : 0}

	imap <C-k> <Plug>(neosnippet_expand_or_jump)
	smap <C-k> <Plug>(neosnippet_expand_or_jump)
	xmap <C-k> <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
	let g:lightline = {
	\ 'colorscheme' : 'wombat',
	\ 'component_function': {
	\ 	'anzu': 'anzu#search_status'
	\ }
	\ }

	let g:lightline.active = {
	\ 'left' : [
	\	['mode', 'paste'],
	\	['readonly', 'filename', 'modified', 'anzu'],
	\ ],
	\ }

	let g:lightline.inactive = {
	\ 'left' : [
	\	['readonly', 'filename', 'modified'],
	\ ],
	\ 'right' : [
	\	['lineinfo'],
	\	['percent'],
	\	['fileformat', 'fileencoding', 'filetype'],
	\ ],
	\ }
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
	vmap <Enter> <Plug>(EasyAlign)
	nmap ga <Plug>(EasyAlign)
	let g:easy_align_delimiters = {
	\ ']': {
	\     'pattern':       '[\]]',
	\     'left_margin':   0,
	\     'right_margin':  0,
	\     'stick_to_left': 0,
	\   },
	\ ')': {
	\     'pattern':       '[)]',
	\     'left_margin':   0,
	\     'right_margin':  0,
	\     'stick_to_left': 0,
	\   },
	\ }
'''

[[plugins]]
repo = 'embear/vim-localvimrc'
hook_add = '''
	let g:localvimrc_ask = 0
	let g:localvimrc_sandbox = 0
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
	let g:EasyMotion_do_mapping = 0
	let g:EasyMotion_smartcase = 1
	nmap s <Plug>(easymotion-overwin-f2)
	nmap f <Plug>(easymotion-bd-f)
	nmap <Leader>l <Plug>(easymotion-bd-jk)
'''

[[plugins]]
repo = 'cocopon/vaffle.vim'
hook_add = '''
	nnoremap <C-e> :Vaffle %:h<CR>
'''

[[plugins]]
repo = 'pepo-le/win-ime-con.nvim'
hook_add = '''
	let g:win_ime_con_mode = 0
'''

[[plugins]]
repo = 'mileszs/ack.vim'
hook_add = '''
	let g:ackprg = 'pt'
'''

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_post_source = '''
lua <<EOF
require('nvim-treesitter.configs').setup {
	ensure_installed = 'cpp',
	highlight = {
		enable = true,
	},
}
EOF
'''
